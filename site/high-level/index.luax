local article = require("articles")["high-level"]
require("simplearticle")

function Wide(atts, children)
  children = bhp.nosource(children)

  return <div
    class="wide flex justify-center mv4"
    style={ atts.wideness and ("--wideness: "..atts.wideness) or "" }
  >
    <div class={{
      "flex flex-column flex-row-l",
      atts.class or "items-center",
      "g4"
    }}>
      {{
        bhp.map(children, function(child)
          return <div class="w-100 flex-fair-l p-dumb">
            {{ child }}
          </div>
        end)
      }}
    </div>
  </div>
end

return <SimpleArticle article={ article }>
  <p>
    For many years now I have been the lead of the Handmade Network, a community of programmers inspired by <a href="https://www.youtube.com/watch?v=A2dxjOjWHxQ">Handmade Hero</a>. If you’ve heard of Handmade, you likely understand it to be about “low-level programming” in some way. Handmade Hero, after all, is a series where you learn to make a game and engine from scratch.
  </p>
  <p>
    We in the Handmade community often bemoan the state of the software industry. Modern software is slow and bloated beyond belief—our computers are literally ten times more powerful in all respects than a decade ago, yet they run <em>worse</em> than they used to. The actual user experience has steadily declined over the years despite the insane power at our fingertips. Worst of all, people’s expectations have hit rock bottom, and everyone thinks this is normal.
  </p>
  <p>
    <img src="dell.png" />
  </p>
  <p>
    The Handmade crowd seems to think that low-level programming is the key to building better software. But this doesn’t really make sense on the surface. How is this practical for the average programmer? Do we really expect everyone to make their own UI frameworks and memory allocators from scratch? Do we really think you should never use libraries? Even if the average programmer could actually work that way, would anything actually improve, or would the world of software just become more fragmented?
  </p>
  <p>
    I do believe, with all my heart, that low-level programming is the path to a better future for the software industry. But the previous criticisms are valid, and should be a serious concern for the Handmade programmer. So what is the connection here? What role does “low-level” have in a better future for software?
  </p>

  <hr/>
  
  <Wide class="items-start">
    <>
      <p>
        In 2019, a maker and YouTuber named Simone Giertz put out a project called <a href="https://youtu.be/jKv_N0IDS2A?si=jdvzynwWmbfc9fx-">“Truckla”</a>.
      </p>
      <p>
        Simone wanted an Tesla pickup truck, but the Cybertruck was still just a rumor, and she was feeling impatient. So she did what any reasonable person would do, and decided to convert a Tesla Model 3 into a pickup truck.
      </p>
      <p>
        The results speak for themselves. Truckla looks amazing, drives perfectly, and still functions  as a modern EV. This is no small feat—obviously you cannot just cut the roof off a sedan and call it a pickup truck. She and her team had to ensure that the car was structurally sound, that it could still charge, and that the software still worked as intended. Truckla is an impressive feat of engineering that took genuine creativity and craftsmanship.
      </p>
      <p>
        And yet, Truckla is still not a great pickup truck! The bed size is small, it can’t haul as much weight, and it’s likely much less efficient than a truck engineered from the ground up. If you were in the market for a pickup truck, you would not buy a Truckla! (You might not buy a Cybertruck either, but I digress.)
      </p>
      <p>
        Truckla is an excellent execution of a flawed idea. If you actually want to build a good pickup truck, you have to start with the <b>frame</b>.
      </p>
    </>
    <img src="truckla.png" />
  </Wide>

  <hr/>
  
  <p>
    In the world of software, the equivalent of the "frame" is the tech stack. Programming languages, frameworks, libraries, and platforms shape software in the same way that the frame shapes the car. If you start with a sedan and try to convert it to a truck, you will get a bad truck—and in exactly the same way, if you start with the wrong stack, you’ll get bad software. It doesn’t matter how much engineering effort you put in.
  </p>
  <p>
    As an example, let’s look at a program that everyone has interacted with at some point.
  </p>
  <img src="newreddit.png"/>
  <p>
    This is New Reddit. It’s a new frontend they rolled out roughly a decade ago, and most Redditors hate it. Because so many people hate it, Old Reddit is still online, and this gives us a unique opportunity to compare two functionally identical pieces of software made a decade apart.
  </p>
  <p>
    Back in 2023, I was experiencing horrible lag on New Reddit. Typing comments was sluggish, comments took a long time to expand and collapse, and even hovering over a tooltip would cause a full-page hitch—all typical of modern software. Old Reddit, on the other hand, was a breath of fresh air—everything responded instantly. Aside from outdated aesthetics, Old Reddit was better in every way.
  </p>
  <p>
    So here’s a thought experiment: How much work should it take to collapse a single comment?
  </p>
  <p>
    This is a pretty easy question, actually. All that needs to happen—all that <em>should</em> happen—is to hide or remove a few DOM elements, and update some text to say “collapsed”. A well-written Reddit frontend should more or less do exactly this. But let’s see what New Reddit did:
  </p>
  <Wide>
    <img src="jquery.png"/>
  </Wide>
  <p>
    Gross. Call stacks thirty functions deep, layout computation in the middle of rendering, some kind of event or animation framework, and…hold on, is that jQuery?
  </p>
  <p>
    My mistake, that’s actually a profile of Old Reddit. Here’s New Reddit:
  </p>
  <Wide wideness="32rem">
    <img src="burnitwithfire.png"/>
  </Wide>
  <p>
    If you care about quality software, then your jaw should be on the floor. Again, this was the work being performed when collapsing a <em>single comment</em>. It is a <em>staggering</em> amount of waste for what should have been a handful of DOM calls.
  </p>
  <p>
    On my first-gen M1 MacBook Air, it took Old Reddit about 10 milliseconds to collapse a comment. That could definitely be improved, but 10 milliseconds is fine. It feels responsive and keeps the site running at 60 frames per second. New Reddit, on the other hand, took <b>almost 200 milliseconds</b>—almost 20 times slower than Old Reddit, and probably 50 to 100 times slower than if you wrote the required DOM calls by hand.
  </p>
  <p>
    So, once we pick our jaws up off the floor, we have to ask the question: How on earth did we get here? Were Reddit’s devs just stupid, lazy JS framework fanboys who would rather build Rube Goldberg machines than do their jobs?
  </p>
  <p>
    Maybe tbh. But laziness alone doesn’t tell the whole story. Mere laziness doesn’t produce the kind of pervasive waste I saw in New Reddit. The real problem with New Reddit was the stack it was built on.
  </p>

  <hr/>

  <p>
    So what was the Reddit stack? Back in 2023, New Reddit was a React app with Redux for state management. (These days it seems they have rewritten it in Web Components.) React and Redux of course sit atop the web platform: HTML, CSS, and JavaScript. This platform is implemented by some browser engine, which then runs on some operating system, and finally on the user’s physical hardware (which is itself extremely complicated, but we have to stop somewhere).
  </p>
  <p>
    Before I was hired at Mozilla, I worked on an application that used precisely this same stack. Our application was an employee scheduling program that allowed managers to create weekly schedules for hourly workers. In about 2016 we replaced our aging Backbone.js frontend with a new one written in React and Redux, presumably because it was a popular choice at the time.
  </p>
  <p>
    As a result, I became intimately familiar with how a React+Redux app is constructed. I also spent a lot of time trying to improve the app’s abysmal performance. I lived inside the Chrome and React profilers, diligently tracking down slow functions and suppressing unnecessary React updates. We had a whole caching system for our Redux selectors, and I added logging to help us find selectors with a high cache miss rate. I built custom JS parsers to make graphs of our selector dependencies and to find ways to split the app into smaller pieces. Unfortunately, none of my work made much of a difference—performance continued to plummet as the app increased in complexity.
  </p>
  <p>
    When you try to make a fast React+Redux app, you are constantly fighting the framework. These two libraries constantly do unnecessary work, and your job is to <em>suppress</em> that work until things run acceptably again. But sometimes the cure is worse than the poison: an expensive <code>shouldComponentUpdate</code> versus an expensive React re-render. Everything wants to update all the time, and as the app grows larger, the frequency and complexity of updates increases until there's no salvaging it.
  </p>
  <p>
    New Reddit exemplified this perfectly: collapsing a comment would dispatch a Redux action, which would update the global Redux store, which would cause <em>all</em> Redux-connected components on the page to update, which would cause all their children to update as well. In other words, <b>collapsing one comment triggered an update for nearly every React component on the page.</b> No amount of caching, DOM-diffing, or <code>shouldComponentUpdate</code> can save you from this amount of waste.
  </p>
  <p>
    At the end of the day, I had to conclude that it is simply not possible to build a fast app on this stack. I have since encountered many web applications that suffer in exactly the same way. Time and again, if it’s slow, it’s probably using React, and if it’s <em>really</em> slow, it’s probably using Redux. The stack is the problem. It’s the only reasonable conclusion.
  </p>

  <hr/>

  <p>
    Thankfully, there are of course other stacks to choose from. At any point in this stack, we can find alternatives:
  </p>
  <ul>
    <li>
      We could choose a different JavaScript framework. Perhaps we could use Vue, or Svelte, or SolidJS, since these have presumably had time to learn from React’s mistakes. Or, of course, you could ditch all the frameworks and just use JS and the DOM APIs directly, especially if your application is mostly static like Reddit.
    </li>
    <li>
      We could use other APIs within the browser instead of HTML, CSS, and JS. For example, we could build our app in WebGL and WebAssembly, building our own UI stack or using an alternative framework like Flutter. Doing this yourself might sound crazy, but it’s been done successfully many times before—for example, Figma famously <a href="https://www.figma.com/blog/building-a-professional-design-tool-on-the-web/">built their app from scratch</a> in WASM and WebGL, including a custom text rendering engine and custom versions of common UI components, and Figma’s outstanding performance has led to domination in the design market. Google Docs and Google Sheets also use WASM and WebGL for rendering their documents instead of HTML and CSS.
    </li>
    <li>
      We don’t have to build web apps! We can build native apps instead, perhaps using alternative cross-platform frameworks like Qt, game engines like Unreal, OS abstraction layers like SDL, or again just using the native APIs directly. This is obviously the right choice for performance-intensive apps, and a valid option in general for developers who are serious about delivering a high-quality experience.
    </li>
  </ul>
  <p>
    We actually have not just a stack, but a tree. Every point on this tree is a valid choice for how to build your software, and different points in the tree will be better fits for different kinds of software.
  </p>

  <p>
    I like to imagine that when the developers of New Reddit sat down at the whiteboard, this is what they saw:
  </p>

  <TODO>"The foundations of the world</TODO>

  <p>
    There are not a lot of choices here. Critically, the best choice for them (direct DOM manipulation, like Old Reddit) is not even on the table. For whatever reason, I think they just didn’t even consider it as an option.
  </p>
  <p>
    The problem here is that their view of the world is too high-level. You can’t actually access most of the tree if all you know is the highest level of the tree. If all you know is React, the choice is made for you—you can only use React or frameworks on top of React. But the lower level you can go, the more the tree opens up to you, and the better your choice of stack can be.
  </p>
  <p>
    The first reason, then, that we should care about low-level is that the lower you can go, the better choices you can make. We can make better software by <em>starting</em> in the right place, with the right frame and the right stack. We can build trucks instead of Trucklas.
  </p>

  <hr/>

  <p>
    But…this isn’t really enough, right? The software industry will not be saved by a few programmers making better choices. It’s an improvement, to be sure, but it’s far from the answer.
  </p>
  <p>
    We are now faced with a more uncomfortable question: what if there are no good options in this tree? What if none of these choices are actually good for the kind of software we want to make?
  </p>
  <p>
    For example, what if you want to ship a native app, so you have direct access to the hardware, but you also want a cross-platform UI? What are your choices? You could use Qt, but it tends to feel very dated and has strong opinions about how you architect your software. Game engines would likewise be a strange fit for a lot of applications, offering plenty of rendering power but little for 2D UI. There are some relative newcomers like Flutter, but Flutter makes you buy into Dart, and we all know Dart is not the right tool for a performance-intensive application. So what do you do? There are no good choices on the market—you’ll have to build it yourself.
  </p>
  <p>
    Our tree is top-heavy. If we survey the software development landscape today, we see an insane number of JavaScript libraries and frameworks, an ever-growing number of browser APIs, and very little development outside of browsers besides frameworks that are Web-compatible and therefore subject to the same constraints. If our tree was a real tree, it would look something like this—and this is not a healthy tree.
  </p>
  <TODO>Picture of tree!</TODO>
  <p>
    The analogy works even better, actually, when you consider how many branches are dead or dying. What is the lifespan of a JS framework these days? Two years? Five if you’re lucky? More likely, the developer will have vanished off the face of the earth within a month.
  </p>
  <p>
    Do we really imagine that the future of the software industry is to grow this tree even taller? To build more on top? Frameworks on top of frameworks? Do we imagine that in the future we’ll still be using HTML and CSS for sophisticated applications, when they’ve clearly been the wrong choice for years? Do we imagine that we’ll continue to ship apps on top of browsers, on top of operating systems, when modern browsers are basically operating systems unto themselves?
  </p>
  <p>
    If we keep building, this tree will collapse under its own weight. We need to prune it, and grow new branches from lower in the tree.
  </p>

  <hr/>

  <p>
    But who is going to do that? Who is going to build that future for the software industry?
  </p>
  <p>
    It requires a particular type of person. It needs to be someone with inherent drive and passion for innovation in software. But they also need to have low-level knowledge. They need to be able to make different choices from those who came before, to explore parts of the tree that haven’t yet been explored.
  </p>
  <TODO>Venn diagram</TODO>
  <p>
    The overlap between these circles is <em>tiny</em>. There are so few people who fit into both categories that we are just not seeing much innovation in that space. In fact, this image is pretty generous when you consider how few low-level programmers there are in general.
  </p>
  <p>
    On the other hand, there actually are lots of people in the software industry with a drive to innovate. But they’re all making JavaScript frameworks. They don’t possess the low-level knowledge required to actually make a significant difference. That’s just the reality of it—if you build up at the top of the tree, all the important decisions have already been made for you. You are painting a Truckla a different color! It is not going to make a difference!
  </p>
  <p>
    So the second reason I believe low-level is critical to the future of the software industry is that it simply expands the circle. We can capture some of those people with the drive to innovate and equip them to actually innovate in meaningful ways. We need more people exploring this low-level space, and I know that for many people, low-level knowledge would open their eyes to possibilities they would never have even conceived of before.
  </p>
  <p>
    Not everyone who makes their own text editor will have great ideas about the future of programming. Not everyone who makes their own compiler will have great ideas about programming languages. Not everyone who makes their own UI library will have great ideas about UI design. But <em>some</em> of them will. And it only takes a few of them to make a difference in the software industry.
  </p>

  <hr/>

  <p><i>This article is an adaptation of a talk I gave at Handmade Seattle 2023. I have republished my talk in written form for posterity. I hope you enjoyed it and found it inspiring.</i></p>
</SimpleArticle>
