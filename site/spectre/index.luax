local article = require("articles")["spectre"]
require("simplearticle")

require("code")
require("util")
local json = require("json")

function Head()
  return <>
    <script src="dom.js"></script>
    <link rel="stylesheet" href="style.css" />
  </>
end

local timingMessageSuccess = "success!"
local timingMessageError = "bad login"
local timingDb = {
  { username = "alpha@example.com", password = "hunter2" },
  { username = "bravo@example.com", password = "dolphins" },
  { username = "charlie@example.com", password = "Password1!" },
  { username = "delta@example.com", password = "delta" },
}

function Timing()
  return <div class="timing-demo flex flex-column g2">
    <!-- Client -->
    <div class="flex g2 items-stretch">
      <div class="flex flex-column g2 ba pa3 br3 overflow-hidden">
        <h3 class="mt0">Log in</h3>
        <form id="timing-form" class="flex flex-column g2">
          <input class="ph2 pv1" id="timing-username" placeholder="Username" value={ timingDb[1].username } />
          <input class="ph2 pv1" id="timing-password" type="password" placeholder="Password" value={ timingDb[1].password } />
          <input type="submit" class="ph2 pv1" id="timing-go" value="Submit" />
        </form>
      </div>
      <div id="timing-attempts-container" class="flex-grow-1 ba br3 overflow-y-scroll relative">
        <div class="absolute absolute--fill flex flex-column">
          <h3 class="mt0 pt3 ph3">Attempts</h3>
          <table class="sticky-table">
            <thead>
              <tr>
                <th>username</th>
                <th>response</th>
                <th>timeline</th>
              </tr>
            </thead>
            <tbody id="timing-attempts" class="overflow-y-auto maxh-3">
              <tr class="attempt empty">
                <td><span class="hidden">{{ timingDb[1].username }}</span></td>
                <td><span class="hidden">{{ timingMessage }}</span></td>
                <td></td>
              </tr>
              <tr class="attempt empty">
                <td>&nbsp</td>
                <td></td>
                <td></td>
              </tr>
              <tr class="attempt empty">
                <td>&nbsp;</td>
                <td></td>
                <td></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div class="self-center">
      <input type="checkbox" id="timing-hide-server" /><label class="pl2" for="timing-hide-server">Hide server details</label>
    </div>

    <!-- Server -->
    <div class="flex g2 relative">
      <div class="ba pa3 br3 overflow-x-auto bg--codeblock relative">
        <div class="absolute left-0 w-100 bg-red o-30" style="height: 1.2rem; top: 1.1rem"></div>
        <div class="absolute left-0 w-100 bg-green o-30" style="height: 1.2rem; top: 4.9rem"></div>
        <Code lang="python" bare class="relative" src={[[
user = database.get(req.username)
if not user:
  return "]]..timingMessageError..[["
if not checkPassword(user.password, req.password):
  return "]]..timingMessageError..[["
return "]]..timingMessageSuccess..[["
      ]]} />
      </div>
      <div class="flex-grow-1 ba br3">
        <table class="w-100 h-100">
          <tr>
            <th>username</th>
            <th>password</th>
          </tr>
          {{ bhp.map(slice(timingDb, 1, #timingDb - 1), function (row)
            return <tr>
              <td>{{ row.username }}</td>
              <td>{{ row.password }}</td>
            </tr>
          end) }}
          <tr>
            <td>???</td>
            <td>???</td>
          </tr>
        </table>
      </div>
      <div id="timing-server-cover" class="absolute absolute--fill flex justify-center items-center bg--body ba br3 o-0 pointer-events-none">
        Mysterious server
      </div>
    </div>
    <script>
      window.timingMessageSuccess = {{ bhp.json(timingMessageSuccess) }};
      window.timingMessageError = {{ bhp.json(timingMessageError) }};
      window.timingDb = JSON.parse({{ bhp.json(timingDb) }});
    </script>
  </div>
end


function CPUDemo()
  return  <div id="cpu-demo" class="timing-demo flex flex-column g2">
            <div class="flex g2 items-stretch">
              <div class="flex flex-column g2 ba pa3 br3 overflow-hidden">
                <h3 class="mt0">CPU</h3>
                <form class="flex flex-column g2">
                  <div>
                    <input class="ph2 pv1" id="cpu-secret-index" type="number" min="0" max="3" placeholder="Secret Index" />
                    <input type="submit" class="ph2 pv1" id="cpu-lookup" value="Lookup" />
                  </div>
                  <input type="submit" class="ph2 pv1" id="cpu-probe" value="Probe ProbeArray" />
                  <input type="submit" class="ph2 pv1" id="cpu-clear-cache" value="Clear CPU Cache" />
                  <div class="mt6-ns">
                    <input id="cpu-vault-0" type="number" min="0" max="9" class="ph2 pv1 w3-ns" />
                    <input id="cpu-vault-1" type="number" min="0" max="9" class="ph2 pv1 w3-ns" />
                    <input id="cpu-vault-2" type="number" min="0" max="9" class="ph2 pv1 w3-ns" />
                    <input id="cpu-vault-3" type="number" min="0" max="9" class="ph2 pv1 w3-ns" />
                    <input type="submit" class="ph2 pv1" id="cpu-unlock-vault" value="Unlock Vault" />
                  </div>
                  <div id="cpu-vault-padlock-locked" class="center-ns">
                    <svg fill="#000000" height="80px" width="80px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve">
                      <g>
                        <g>
                          <path d="M435.2,204.8h-25.6v-51.2C409.6,68.77,340.83,0,256,0S102.4,68.77,102.4,153.6v51.2H76.8c-14.14,0-25.6,11.46-25.6,25.6v256c0,14.14,11.46,25.6,25.6,25.6h358.4c14.14,0,25.6-11.46,25.6-25.6v-256C460.8,216.26,449.34,204.8,435.2,204.8z M128,153.6c0-70.579,57.421-128,128-128s128,57.421,128,128v51.2H128V153.6z M435.2,486.4H76.8v-256h358.4V486.4z"/>
                        </g>
                      </g>
                      <g>
                        <g>
                          <path d="M256,307.2c-21.205,0-38.4,17.195-38.4,38.4c0,16.691,10.718,30.763,25.6,36.053V435.2h25.6v-53.547c14.882-5.291,25.6-19.354,25.6-36.053C294.4,324.395,277.205,307.2,256,307.2z M256,358.4c-7.057,0-12.8-5.743-12.8-12.8s5.743-12.8,12.8-12.8c7.057,0,12.8,5.743,12.8,12.8S263.057,358.4,256,358.4z"/>
                        </g>
                      </g>
                    </svg>
                  </div>
                  <div id="cpu-vault-padlock-unlocked" class="center-ns dn-l">
                    <svg fill="#19a974" height="80px" width="80px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve">
                      <g>
                        <g>
                          <path d="M256,307.2c-21.205,0-38.4,17.195-38.4,38.4c0,16.691,10.718,30.763,25.6,36.053V435.2h25.6v-53.547c14.882-5.291,25.6-19.354,25.6-36.053C294.4,324.395,277.205,307.2,256,307.2z M256,358.4c-7.057,0-12.8-5.743-12.8-12.8s5.743-12.8,12.8-12.8c7.057,0,12.8,5.743,12.8,12.8S263.057,358.4,256,358.4z"/>
                        </g>
                      </g>
                      <g>
                        <g>
                          <path d="M435.2,204.8H128v-51.2c0-70.579,57.421-128,128-128c61.815,0,113.519,44.049,125.414,102.4h25.882C395.085,55.381,332.092,0,256,0c-84.83,0-153.6,68.77-153.6,153.6v51.2H76.8c-14.14,0-25.6,11.46-25.6,25.6v256c0,14.14,11.46,25.6,25.6,25.6h358.4c14.14,0,25.6-11.46,25.6-25.6v-256C460.8,216.26,449.34,204.8,435.2,204.8z M435.2,486.4H76.8v-256h358.4V486.4z"/>
                        </g>
                      </g>
                    </svg>
                  </div>
                </form>
              </div>
              <div id="timing-cpu-probe-array" class="flex-grow-1 ba br3 relative">
                <div class="flex flex-column">
                  <h3 class="mt0 pt3 ph3">Probing</h3>
                  <table class="sticky-table">
                    <thead>
                      <tr>
                        <th>probe array index</th>
                        <th>load timeline</th>
                      </tr>
                    </thead>
                    <tbody class="overflow-y-auto maxh-3">
                      <tr class="cpu-probe">
                          <td>0</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>1</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>2</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>3</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>4</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>5</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>6</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>7</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>8</td>
                          <td></td>
                      </tr>
                      <tr class="cpu-probe">
                          <td>9</td>
                          <td></td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <div class="self-center">
              <input type="checkbox" id="cpu-hide" /><label class="pl2" for="cpu-hide">Hide CPU details</label>
            </div>
            <div class="flex g2 relative">
            <!-- CODE HERE? -->
              <div class="flex-grow-1 ba br3">
                <table class="w-100 h-100 dt--fixed">
                  <tbody>
                    <tr>
                      <th>CPU Cache</th>
                      <th>RAM</th>
                    </tr>
                    <tr>
                      <td id="cpu-cache-0"></td>
                      <td id="cpu-ram-0" style="transition:background-color 0.15s ease-in">probeArray[0]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-1"></td>
                      <td id="cpu-ram-1" style="transition:background-color 0.15s ease-in">probeArray[1]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-2"></td>
                      <td id="cpu-ram-2" style="transition:background-color 0.15s ease-in">probeArray[2]</td> 
                    </tr>
                    <tr>
                      <td id="cpu-cache-3"></td>
                      <td id="cpu-ram-3" style="transition:background-color 0.15s ease-in">probeArray[3]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-4"></td>
                      <td id="cpu-ram-4" style="transition:background-color 0.15s ease-in">probeArray[4]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-5"></td>
                      <td id="cpu-ram-5" style="transition:background-color 0.15s ease-in">probeArray[5]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-6"></td>
                      <td id="cpu-ram-6" style="transition:background-color 0.15s ease-in">probeArray[6]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-7"></td>
                      <td id="cpu-ram-7" style="transition:background-color 0.15s ease-in">probeArray[7]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-8"></td>
                      <td id="cpu-ram-8" style="transition:background-color 0.15s ease-in">probeArray[8]</td>
                    </tr>
                    <tr>
                      <td id="cpu-cache-9"></td>
                      <td id="cpu-ram-9" style="transition:background-color 0.15s ease-in">probeArray[9]</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <div id="cpu-cover" class="absolute absolute--fill flex justify-center items-center bg--body ba br3 o-0 pointer-events-none">
                Mysterious CPU
              </div>
            </div>
            
          </div>
end 

return <SimpleArticle article={ article } head={ Head }>
  <p class="i">
    This article is my submission for the Handmade Network's 2024 <a href="https://handmade.network/jam/learning-2024">Learning Jam</a>. As such, it is the from the perspective of a recent learner, NOT the perspective of an expert on CPUs or CPU vulnerabilities. I have attempted to verify the article's contents as well as I can, but please do not consider it an authoritative source.
  </p>
  <p class="i">
    Also, due to time constraints, this article does not work well on mobile. Sorry!
  </p>

  <p>
    <a href="https://spectreattack.com/">Spectre</a> is a CPU vulnerability published in 2017. Or rather, it's a class of vulnerabilities—a collection of exploits inherent to the design of modern CPUs.
  </p>
  <p>
    Spectre leverages a feature of the CPU called <i>speculative execution</i> to exploit otherwise-correct programs and extract information that should otherwise be secret. Spectre is subtle, but also very simple, and in this short article I hope to give you an intuitive sense of how Spectre works and what can (or can't) be done to mitigate it.
  </p>
  <p>
    The subject of our investigation is this innocuous-looking snippet of code from the <a href="https://spectreattack.com/spectre.pdf">Spectre paper</a>. By the end, it should hopefully be clear how this seemingly correct code can be exploited.
  </p>
  <Code lang="c" src=[[
if (x < array1_size) {
  y = array2[array1[x] * 4096];
}
  ]] />

  <h2>What is speculative execution?</h2>
  <p>
    Before covering speculative execution, we first have to discuss <i>out-of-order execution</i>. Let's start with a simpler code example:
  </p>
  <Code lang="c" src=[[
arr[0] = arr[0] / 2;
arr[1] = arr[1] / 3;
  ]] />
  <p>
    We would intuitively expect the following operations to happen in the order written, but the CPU may actually execute the instructions in a different order. The end result will still be exactly the same, but this reordering can achieve much greater performance! This is because accessing memory is slow—main memory is <a href="https://gist.github.com/jboner/2841832">hundreds of times slower</a> than comparisons or arithmetic. In addition, CPUs can execute multiple instructions in parallel, overlapping the work and finishing the entire process more quickly.
  </p>

  <div class="flex justify-center mv4">
    <div class="flex flex-column">
      <h3 class="mt0">No reordering, no pipelining</h3>
      <div class="flex g3">
        <div class="flex flex-column g2">
          <div class="h1">Load <code>arr[0]</code> from memory</div>
          <div class="h1">Compute <code>arr[0] / 2</code></div>
          <div class="h1">Store the result to <code>arr[0]</code></div>
          <div class="h1">Load <code>arr[1]</code> from memory</div>
          <div class="h1">Compute <code>arr[1] / 3</code></div>
          <div class="h1">Store the result to <code>arr[1]</code></div>
        </div>
        <div class="instrs flex flex-column g2">
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 0"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 2rem; margin-left: 4rem"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 6rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 10rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 14rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 16rem"></div></div>
        </div>
      </div>

      <h3>Reordering / pipelining</h3>
      <div class="flex g3">
        <div class="flex flex-column g2">
          <div class="h1">Load <code>arr[0]</code> from memory</div>
          <div class="h1">Load <code>arr[1]</code> from memory</div>
          <div class="h1">Compute <code>arr[0] / 2</code></div>
          <div class="h1">Compute <code>arr[1] / 3</code></div>
          <div class="h1">Store the result to <code>arr[0]</code></div>
          <div class="h1">Store the result to <code>arr[1]</code></div>
        </div>
        <div class="instrs flex flex-column g2">
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 0"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 1rem"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 2rem; margin-left: 4rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 5rem"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 4rem; margin-left: 6rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 7rem"></div></div>
        </div>
      </div>
    </div>
  </div>

  <p>
    However, conditionals present a problem. If the code contains an if statement, the CPU cannot know whether the if statement will be true or false. This creates a bottleneck where the CPU must fully compute the condition before it can proceed.
  </p>
  <p>
    Or that would be true, if not for <i>speculative execution</i>. Rather than wait for a condition to be resolved, the CPU instead predicts (speculates) whether the condition will be true or false, and proceeds accordingly. If it guesses correctly, then it saves time. If it guesses incorrectly, then it discards the incorrect work and tries again, at a small penalty. In the following example, the CPU will predict that the condition is true, which may or may not be correct.
  </p>

  <div class="flex justify-center mv4">
    <div class="flex flex-column">
      <Code lang="c" src=[[
n = arr[i];
if (n % 2 == 0) {
  arr[i] = n / 2;
} else {
  arr[i] = n * 3 + 1;
}
      ]] />

      <h3 class="mt0">Correct prediction (n is even)</h3>
      <div class="flex g3">
        <div class="flex flex-column g2">
          <div class="h1">Load <code>arr[i]</code> from memory</div>
          <div class="h1">Compute <code>n % 2</code></div>
          <div class="h1">Speculatively compute <code>n / 2</code></div>
          <div class="h1">Test <code>n % 2 == 0</code></div>
          <div class="h1">Speculatively store <code>n / 2</code></div>
          <div class="h1">Commit results</div>
        </div>
        <div class="instrs flex flex-column g2">
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 0"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 4rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 5rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 6rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 7rem"></div></div>
          <div class="h1"><div class="instr bg-green" style="width: 1rem; margin-left: 11rem"></div></div>
        </div>
      </div>

      <h3>Incorrect prediction (n is odd)</h3>
      <div class="flex g3">
        <div class="flex flex-column g2">
          <div class="h1">Load <code>arr[i]</code> from memory</div>
          <div class="h1">Compute <code>n % 2</code></div>
          <div class="h1">Speculatively compute <code>n / 2</code></div>
          <div class="h1">Test <code>n % 2 == 0</code></div>
          <div class="h1">Speculatively store <code>n / 2</code></div>
          <div class="h1">Roll back</div>
          <div class="h1">Compute <code>n * 3 + 1</code></div>
          <div class="h1">Store <code>n * 3 + 1</code></div>
          <div class="h1">Commit results</div>
        </div>
        <div class="instrs flex flex-column g2">
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 0"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 4rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 5rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 6rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 7rem"></div></div>
          <div class="h1"><div class="instr bg-red" style="width: 1rem; margin-left: 8rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 2rem; margin-left: 9rem"></div></div>
          <div class="h1"><div class="instr bg-blue" style="width: 4rem; margin-left: 11rem"></div></div>
          <div class="h1"><div class="instr bg-green" style="width: 1rem; margin-left: 15rem"></div></div>
        </div>
      </div>
    </div>
  </div>

  <p>
    Speculative execution is critical for out-of-order execution, and out-of-order execution is critical for performance. And as long as the CPU can perfectly roll back a bad speculation, there should be no problems!
  </p>
  <p>
    ...CPUs <em>can</em> perfectly roll back a bad speculation, right?
  </p>

  <h2>No they cannot</h2>

  <p>
    When a CPU rolls back work, it restores the contents of all the registers and discards any pending work. In theory, this should be completely invisible to the program—it should not be able to tell that the CPU did anything unusual. However, CPUs are real devices with real limits, speculative execution is real execution, and the effects of speculative execution can in practice be observed in clever ways.
  </p>
  <p>
    For the simplest Spectre exploit, we will look at the effect of speculative execution on the cache. As mentioned, main memory is extremely slow, so CPUs have a cache for recently-accessed memory. This cache makes memory accesses hundreds of times faster, but it has an important property for Spectre:
  </p>
  <p class="b">
    On a bad speculation, the cache does not get rolled back.
  </p>
  <p>
    Speculative loads are real loads that will cause main memory to be fetched and stored in the cache. This is nominally invisible to the program, but the whole point of the cache is to improve performance—and performance is observable.
  </p>

  <h2>Timing attacks!</h2>

  <p>
    Timing can tell you a surprising amount about a system. Consider the following interactive example, which simulates a simple login page.
  </p>
  
  <div class="wide wide-sm">
    <Timing />
  </div>

  <p>
    Notice that, despite the message "{{ timingMessageError }}", the timing of the response reveals whether the username exists in the system or not. When a user is not found in the database, it returns quickly, but when a user is found, it will also run an expensive password check. See if you can figure out the username of the hidden user in the database using this information.
  </p>

  <p>
    This idea extends to many other systems. Generally, timing a system can tell you something about the work being done, even if you can't observe that work directly. So, it's now time to combine this idea with our knowledge of CPU caches and speculative execution.
  </p>

  <h2>Reading memory with only a timer</h2>

  <p>
    While it may be interesting that timing a system can reveal some insights about how it works, it's not clear how this can be used to actually do anything serious. However, it is actually possible to extract the contents of memory using nothing but a timer.
  </p>
  <p>
    Suppose we have the following code:
  </p>
  <Code lang="c" src=[[
char dereferenceAndLookup(char* p) {
  return probeArray[*p];
}
  ]] />
  <p>
    This code will dereference a pointer, then use the value it finds to index into an array. Because accesses to memory are cached, this means that some element of <code>probeArray</code> will be in cache—specifically the index corresponding to <code>*p</code>.
  </p>
  <p>
    This is now exploitable via a timing attack. <b>Whichever index of <code>probeArray</code> loads fastest is the value of <code>*p</code>.</b>
  </p>
  <p>
    You can see this in the demo below. Choose an address (index) to run the function with, then click 'Probe ProbeArray' to see how quickly each element loads. 
    The result reveals what value was stored at that address (index). See if you can figure out the combination to the vault hidden in memory using this information.
  </p>
  <p>
  </p>
  <div class="wide wide-sm">
    <CPUDemo />
  </div>
  <p class="i">
    Note for pedants: yes, I know that CPUs do not cache individual integers. I will address this later, I promise.
  </p>
  <p>
    Things are now more serious. The stage has been set for a proper Spectre exploit.
  </p>

  <h2>The (almost) real deal</h2>

  <p>
    The roadmap for our exploit is as follows:
  </p>
  <ol>
    <li>Make the CPU load from an address containing a secret byte <code>s</code></li>
    <li>Make the CPU use <code>s</code> to index an array</li>
    <li>Find the fast element in the array to learn the value of <code>s</code></li>
  </ol>
  <p>
    Step 1 might seem potentially difficult to achieve in languages without pointers. In JavaScript, for example, we can't just write <code>int s = *(int*)(0xDA7A)</code> to access a memory address directly. However, in nearly any language, we can simply use arrays to bypass this limitation.
  </p>
  <p>
    In a sense, you can think of an array index as a relative pointer—an address relative to the start of the array. If we can determine the address of the array itself, we can use it to access whatever data we like. For example, if the array is at address 1000, and we would like to read memory address 1234, we can simply access <code>array[234]</code>. Or, we can just throw random indexes at the array and see what we find out of bounds.
  </p>
  <p>
    Of course, well-written programs have bounds checks to ensure that you cannot read an array out of bounds. But speculative execution can bypass this limitation, as we saw before. The CPU can speculatively load the out-of-bounds data <em>before</em> it knows that it is out of bounds—and this will be reflected in the cache.
  </p>
  <p>
    We can therefore modify our prior example to look like this:
  </p>
  <Code lang="c" src=[[
char probeArray[255];

char exploitable(int i) {
  if (0 <= i && i < arraySize) {
    char secret = pointerishArray[i];
    return probeArray[secret];
  }
  return -1;
}
  ]] />

  <p>
    If CPUs never ran code out of order, this code would be completely fine. Any out-of-bounds value for <code>i</code> would be handled correctly, and secret data would never be loaded. But this is not what actually happens.
  </p>
  <p>
    Suppose we call <code>exploitable</code> with a malicious, out-of-bounds value for <code>i</code>. If the CPU speculates that the if statement will be true, it is assuming that <code>i</code> is in bounds and the data is safe to look up. It will then <em>speculatively</em> load <code>pointerishArray[i]</code>, and <em>speculatively</em> load <code>probeArray[secret]</code> based on the result, making <code>probeArray[secret]</code> the fastest-loading element—even after the incorrect work is rolled back!
  </p>
  <p>
    <TODO>Picture or demo or something :(</TODO>
  </p>
  <p>
    This technique is surprisingly portable. The previous examples have been in C, but the authors of the Spectre paper also demonstrated a JavaScript version of the exploit that could run in browsers. They were able to read data belonging to the browser process itself, simply by using JavaScript's <code>Uint8Array</code>. This means that a web page could potentially exploit the browser itself, just by running malicious JavaScript code that never actually triggers an error!
  </p>

  <h2>The fussy real-life details</h2>

  <p>
    The previous examples have simplified various aspects of the exploit. However, getting the exploit to work practically requires a few more tweaks that are worth addressing now.
  </p>
  <p>
    First, CPUs do not actually cache individual integers. Instead they cache in larger units called <i>cache lines</i>, e.g. 128 bytes at a time. This means that loading a single element of <code>probeArray</code> will actually result in 128 values of <code>probeArray</code> being loaded into cache—not ideal for later determining the value of <code>secret</code>. This is why, in the Spectre paper, <code>probeArray</code> is much larger and <code>secret</code> is multiplied by 4096—this ensures that each access to <code>probeArray</code> will get its own cache line.
  </p>
  <p>
    Second, running this exploit in practice requires you to force the CPU to speculate the way you want; specifically, you must train the CPU to predict that <code>i</code> is in bounds, and you must ensure that <code>pointerishArray[i]</code> is cached but <code>arraySize</code> is not. This ensures that the CPU will choose the correct path, and that it will speculate for a substantial amount of time while it waits for <code>arraySize</code> to load from memory. This can generally be achieved by deliberately reading from other memory addresses in such a way that <code>arraySize</code> is evicted from the cache.
  </p>
  <p>
    Finally, <code>probeArray</code> must also be completely evicted from cache so that you can use the cache timings to determine the value of <code>secret</code>. This can be done the same way as for <code>arraySize</code>.
  </p>

  <h2>In conclusion</h2>

  <p>
    I wish I had more time to make interactive demos for this but oh well!!
  </p>

  <script src="script.js"></script>
</SimpleArticle>
